# baseURI: http://datashapes.org/shasf/tests/rules/triple/person2schema.test
# imports: http://datashapes.org/dash
# imports: http://datashapes.org/schema
# imports: http://datashapes.org/shasf/tests/rules/triple/person
# prefix: ex

@prefix dash: <http://datashapes.org/dash#> .
@prefix ex: <http://datashapes.org/shasf/tests/rules/triple/person2schema.test#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://datashapes.org/shasf/tests/rules/triple/person2schema.test>
  rdf:type owl:Ontology ;
  rdfs:label "Test of person2schema" ;
  owl:imports <http://datashapes.org/dash> ;
  owl:imports <http://datashapes.org/schema> ;
  owl:imports <http://datashapes.org/shasf/tests/rules/triple/person> ;
  owl:versionInfo "Created with TopBraid Composer" ;
  sh:declare [
      rdf:type sh:PrefixDeclaration ;
      sh:namespace "http://datashapes.org/shasf/tests/rules/triple/person2schema.test#"^^xsd:anyURI ;
      sh:prefix "ex" ;
    ] ;
  sh:declare [
      rdf:type sh:PrefixDeclaration ;
      sh:namespace "http://schema.org/"^^xsd:anyURI ;
      sh:prefix "schema" ;
    ] ;
.
ex:InferencingTestCase
  rdf:type dash:InferencingTestCase ;
  dash:expectedResult [
      rdf:object <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe-Address> ;
      rdf:predicate <http://schema.org/address> ;
      rdf:subject <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe> ;
    ] ;
  dash:expectedResult [
      rdf:object <http://schema.org/Person> ;
      rdf:predicate rdf:type ;
      rdf:subject <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe> ;
    ] ;
  dash:expectedResult [
      rdf:object <http://schema.org/PostalAddress> ;
      rdf:predicate rdf:type ;
      rdf:subject <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe-Address> ;
    ] ;
  dash:expectedResult [
      rdf:object 12345 ;
      rdf:predicate <http://schema.org/postalCode> ;
      rdf:subject <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe-Address> ;
    ] ;
  dash:expectedResult [
      rdf:object "Doe" ;
      rdf:predicate <http://schema.org/familyName> ;
      rdf:subject <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe> ;
    ] ;
  dash:expectedResult [
      rdf:object "John" ;
      rdf:predicate <http://schema.org/givenName> ;
      rdf:subject <http://datashapes.org/shasf/tests/rules/triple/person#JohnDoe> ;
    ] ;
.
ex:Person2SchemaMappingShape
  rdf:type sh:NodeShape ;
  rdfs:label "Person-to-Schema Mapping Shape" ;
  sh:rule [
      rdf:type sh:TripleRule ;
      sh:object <http://schema.org/Person> ;
      sh:predicate rdf:type ;
      sh:subject sh:this ;
    ] ;
  sh:rule [
      rdf:type sh:TripleRule ;
      sh:object <http://schema.org/PostalAddress> ;
      sh:predicate rdf:type ;
      sh:subject [
          ex:deriveURI (
              sh:this
              "-Address"
            ) ;
        ] ;
    ] ;
  sh:rule [
      rdf:type sh:TripleRule ;
      sh:object [
          sh:path <http://datashapes.org/shasf/tests/rules/triple/person#firstName> ;
        ] ;
      sh:predicate <http://schema.org/givenName> ;
      sh:subject sh:this ;
    ] ;
  sh:rule [
      rdf:type sh:TripleRule ;
      sh:object [
          sh:path <http://datashapes.org/shasf/tests/rules/triple/person#lastName> ;
        ] ;
      sh:predicate <http://schema.org/familyName> ;
      sh:subject sh:this ;
    ] ;
  sh:rule [
      rdf:type sh:TripleRule ;
      sh:object [
          sh:path <http://datashapes.org/shasf/tests/rules/triple/person#zipCode> ;
        ] ;
      sh:predicate <http://schema.org/postalCode> ;
      sh:subject [
          ex:deriveURI (
              sh:this
              "-Address"
            ) ;
        ] ;
    ] ;
  sh:rule [
      rdf:type sh:TripleRule ;
      sh:object [
          ex:deriveURI (
              sh:this
              "-Address"
            ) ;
        ] ;
      sh:predicate <http://schema.org/address> ;
      sh:subject sh:this ;
    ] ;
  sh:targetClass <http://datashapes.org/shasf/tests/rules/triple/person#Person> ;
.
ex:deriveURI
  rdf:type sh:SPARQLFunction ;
  rdfs:label "derive URI" ;
  sh:parameter [
      sh:path ex:base ;
      sh:description "The base URI to derive from." ;
      sh:name "base" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:parameter [
      sh:path ex:concat ;
      sh:datatype xsd:string ;
      sh:description "The text to concatenate to the base to produce the result." ;
      sh:name "concat" ;
    ] ;
  sh:prefixes <http://datashapes.org/shasf/tests/rules/triple/person2schema.test> ;
  sh:returnType rdfs:Resource ;
  sh:select """SELECT ?result
WHERE {
    BIND (IRI(CONCAT(str($base), $concat)) AS ?result)
}""" ;
.
