@prefix dc:     <http://purl.org/dc/elements/1.1/> .
@prefix ex:     <http://example.org/> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/> .
@prefix mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:     <http://www.w3.org/ns/shacl#> .
@prefix sht:    <http://www.w3.org/ns/shacl/test-suite#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
 
<>
	a mf:Manifest ;
	rdfs:comment "Tests of Core features" ;
	rdfs:label "Core Features tests" ;
	mf:entries ( 
		<allowedValues-001> 
		<and-001> 
		<and-002> 
		<class-001>
		<datatype-001>
		<datatype-002>
		<directValueType-001>
		<filterShape-001>
		<filterShape-002>
		<filterShape-003>
		<inverseProperty-001> 
		<length-001> 
		<maxExclusive-001> 
		<maxInclusive-001> 
		<minExclusive-001> 
		<minInclusive-001> 
		<not-001>
		<or-001>
		<pattern-001> 
		<property-001>
		<recursive-001>
		<recursive-002>
		<recursive-003>
		<recursive-004>
		<recursive-005>
		<recursive-006>
		<recursive-007>
		<recursive-008>
		<recursive-009>
		<valueClass-001>
		<valueShape-001>
		<xor-001>
	)
.

<allowedValues-001>
	a sht:Validate ;
	mf:name "Test of a sh:allowedValues" ;
	mf:action [
		sht:schema <allowedValues-001.ttl> ; 
		sht:data <allowedValues-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
  		sh:subject ex:InvalidInstance1 ;
  		sh:predicate ex:value ;
  		sh:object "D" ;
	] ;
	mf:status sht:proposed ; 
.

<and-001>
	a sht:Validate ;
	mf:name "Test of a sh:AndConstraint" ;
	mf:action [
		sht:schema <and-001.ttl> ; 
		sht:data <and-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidRectangle1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidRectangle2 ;
	] ;
	mf:status sht:proposed ; 
.

<and-002>
	a sht:Validate ;
	mf:name "Test of a sh:AndConstraint" ;
	mf:action [
		sht:schema <and-002.ttl> ; 
		sht:data <and-002.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance2 ;
	] ;
	mf:status sht:proposed ; 
.

<and-003>
	a sht:Validate ;
	mf:name "Test of a sh:AndConstraint" ;
	mf:action [
		sht:schema <and-003.ttl> ; 
		sht:data <and-003.ttl> ; 
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:InvalidInstance1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance2 ;
	] ;
	mf:status sht:proposed ; 
.

<class-001>
	a sht:Validate ;
	mf:name "Test of a sh:ShapeClass definition" ;
	mf:action [
		sht:schema <class-001.ttl> ; 
		sht:data <class-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root _:b1 ;
  		sh:subject _:b1 ;
  		sh:predicate sh:maxCount ;
  		sh:object 1.2 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root _:b1 ;
  		sh:subject _:b1 ;
  		sh:predicate sh:predicate ;
	] ;
	mf:status sht:proposed ; 
.

<datatype-001>
	a sht:Validate ;
	mf:name "Test of a sh:datatype definition with xsd:string" ;
	mf:action [
		sht:schema <datatype-001.ttl> ; 
		sht:data <datatype-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
  		sh:subject ex:InvalidInstance1 ;
  		sh:predicate ex:value ;
  		sh:object "A"@en ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance2 ;
  		sh:subject ex:InvalidInstance2 ;
  		sh:predicate ex:value ;
  		sh:object 42 ;
	] ;
	mf:status sht:proposed ; 
.

<datatype-002>
	a sht:Validate ;
	mf:name "Test of a sh:datatype definition with sh:text" ;
	mf:action [
		sht:schema <datatype-002.ttl> ; 
		sht:data <datatype-002.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
  		sh:subject ex:InvalidInstance1 ;
  		sh:predicate ex:value ;
  		sh:object 42 ;
	] ;
	mf:status sht:proposed ; 
.

<directValueType-001>
	a sht:Validate ;
	mf:name "Test of sh:directValueType" ;
	mf:action [
		sht:schema <directValueType-001.ttl> ; 
		sht:data <directValueType-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
  		sh:subject ex:InvalidInstance1 ;
  		sh:predicate ex:value ;
  		sh:object ex:SubInstance ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance2 ;
  		sh:subject ex:InvalidInstance2 ;
  		sh:predicate ex:value ;
  		sh:object ex:InvalidInstance2 ;
	] ;
	mf:status sht:proposed ; 
.

<filterShape-001>
	a sht:Validate ;
	mf:name "Test of a sh:filterShape" ;
	mf:action [
		sht:schema <filterShape-001.ttl> ; 
		sht:data   <filterShape-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
  		sh:subject ex:InvalidInstance1 ;
  		sh:predicate ex:child ;
	] ;
	mf:status sht:proposed ; 
.

<filterShape-002>
	a sht:Validate ;
	mf:name "Test of a sh:filterShape" ;
	mf:action [
		sht:schema <filterShape-002.ttl> ; 
		sht:data   <filterShape-002.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidExampleInstance ;
	] ;
	mf:status sht:proposed ; 
.

<filterShape-003>
	a sht:Validate ;
	mf:name "Test of a sh:filterShape" ;
	mf:action [
		sht:schema <filterShape-003.ttl> ; 
		sht:data   <filterShape-003.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidExampleInstance ;
	] ;
	mf:status sht:proposed ; 
.

<inverseProperty-001>
	a sht:Validate ;
	mf:name "Test of a sh:inverseProperty" ;
	mf:action [
		sht:schema <inverseProperty-001.ttl> ; 
		sht:data   <inverseProperty-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:Father ;
  		sh:object ex:Father ;
  		sh:predicate ex:child ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:Mother ;
  		sh:object ex:Mother ;
  		sh:predicate ex:child ;
	] ;
	mf:status sht:proposed ; 
.

<length-001>
	a sht:Validate ;
	mf:name "Test of a sh:minLength and sh:maxLength" ;
	mf:action [
		sht:schema <length-001.ttl> ; 
		sht:data   <length-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource1 ;
  		sh:subject ex:InvalidResource1 ;
  		sh:predicate ex:property ;
  		sh:object "" ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource2 ;
  		sh:subject ex:InvalidResource2 ;
  		sh:predicate ex:property ;
  		sh:object "abcdef" ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource3 ;
  		sh:subject ex:InvalidResource3 ;
  		sh:predicate ex:property ;
  		sh:object 123456 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource4 ;
  		sh:subject ex:InvalidResource4 ;
  		sh:predicate ex:property ;
  		sh:object [] ;
	] ;
	mf:status sht:proposed ; 
.

<maxExclusive-001>
	a sht:Validate ;
	mf:name "Test of a sh:maxExclusive" ;
	mf:action [
		sht:schema <maxExclusive-001.ttl> ; 
		sht:data   <maxExclusive-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource1 ;
  		sh:subject ex:InvalidResource1 ;
  		sh:predicate ex:property ;
  		sh:object 1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource2 ;
  		sh:subject ex:InvalidResource2 ;
  		sh:predicate ex:property ;
  		sh:object 2 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource3 ;
  		sh:subject ex:InvalidResource3 ;
  		sh:predicate ex:property ;
  		sh:object "a" ;
	] ;
	mf:status sht:proposed ; 
.

<maxInclusive-001>
	a sht:Validate ;
	mf:name "Test of a sh:maxInclusive" ;
	mf:action [
		sht:schema <maxInclusive-001.ttl> ; 
		sht:data   <maxInclusive-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource1 ;
  		sh:subject ex:InvalidResource1 ;
  		sh:predicate ex:property ;
  		sh:object 2 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource2 ;
  		sh:subject ex:InvalidResource2 ;
  		sh:predicate ex:property ;
  		sh:object "a" ;
	] ;
	mf:status sht:proposed ; 
.

<minExclusive-001>
	a sht:Validate ;
	mf:name "Test of a sh:minExclusive" ;
	mf:action [
		sht:schema <minExclusive-001.ttl> ; 
		sht:data   <minExclusive-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource1 ;
  		sh:subject ex:InvalidResource1 ;
  		sh:predicate ex:property ;
  		sh:object 1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource2 ;
  		sh:subject ex:InvalidResource2 ;
  		sh:predicate ex:property ;
  		sh:object 0 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource3 ;
  		sh:subject ex:InvalidResource3 ;
  		sh:predicate ex:property ;
  		sh:object "a" ;
	] ;
	mf:status sht:proposed ; 
.

<minInclusive-001>
	a sht:Validate ;
	mf:name "Test of a sh:minInclusive" ;
	mf:action [
		sht:schema <minInclusive-001.ttl> ; 
		sht:data   <minInclusive-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource1 ;
  		sh:subject ex:InvalidResource1 ;
  		sh:predicate ex:property ;
  		sh:object 0 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource2 ;
  		sh:subject ex:InvalidResource2 ;
  		sh:predicate ex:property ;
  		sh:object "a" ;
	] ;
	mf:status sht:proposed ; 
.

<not-001>
	a sht:Validate ;
	mf:name "Test of a sh:NotConstraint" ;
	mf:action [
		sht:schema <not-001.ttl> ; 
		sht:data   <not-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
	] ;
	mf:status sht:proposed ; 
.

<or-001>
	a sht:Validate ;
	mf:name "Test of a sh:OrConstraint" ;
	mf:action [
		sht:schema <or-001.ttl> ; 
		sht:data   <or-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidRectangle1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidRectangle2 ;
	] ;
	mf:status sht:proposed ; 
.

<pattern-001>
	a sht:Validate ;
	mf:name "Test of a sh:pattern" ;
	mf:action [
		sht:schema <pattern-001.ttl> ; 
		sht:data   <pattern-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource1 ;
  		sh:subject ex:InvalidResource1 ;
  		sh:predicate ex:property ;
  		sh:object "The 123" ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource2 ;
  		sh:subject ex:InvalidResource2 ;
  		sh:predicate ex:property ;
  		sh:object "132" ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidResource3 ;
  		sh:subject ex:InvalidResource3 ;
  		sh:predicate ex:property ;
  		sh:object [] ;
	] ;
	mf:status sht:proposed ; 
.

<property-001>
	a sht:Validate ;
	mf:name "Test of a sh:property" ;
	mf:action [
		sht:schema <property-001.ttl> ; 
		sht:data   <property-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:RectangleWithFloatHeight ;
  		sh:subject ex:RectangleWithFloatHeight ;
  		sh:predicate ex:height ;
  		sh:object 9.2 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:RectangleWithoutHeight ;
  		sh:subject ex:RectangleWithoutHeight ;
  		sh:predicate ex:height ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:RectangleWithTwoHeights ;
  		sh:subject ex:RectangleWithTwoHeights ;
  		sh:predicate ex:height ;
	] ;
	mf:status sht:proposed ; 
.

<qualifiedValueShape-001>
	a sht:Validate ;
	mf:name "Test of a sh:qualifiedValueShape" ;
	mf:action [
		sht:schema <qualifiedValueShape-001.ttl> ; 
		sht:data   <qualifiedValueShape-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:Observation1 ;
  		sh:subject ex:Observation1 ;
  		sh:predicate ex:related ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-001>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion" ;
	mf:action [
		sht:schema <recursive-001.ttl> ; 
		sht:data   <recursive-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:Enrico ;
  		sh:subject ex:Enrico ;
  		sh:predicate ex:knows ;
  		sh:object ex:John ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-002>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion" ;
	mf:action [
		sht:schema <recursive-002.ttl> ; 
		sht:data   <recursive-002.ttl> ; 
	] ;
	mf:status sht:proposed ; 
.

<recursive-003>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion" ;
	mf:action [
		sht:schema <recursive-003.ttl> ; 
		sht:data   <recursive-003.ttl> ; 
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:Instance1 ;
  		sh:subject ex:Instance1 ;
  		sh:predicate ex:someProperty ;
  		sh:object ex:Instance2 ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-004>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion between two shapes" ;
	mf:action [
		sht:schema <recursive-004.ttl> ; 
		sht:data   <recursive-004.ttl> ; 
	] ;
	mf:status sht:proposed ; 
.

<recursive-005>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion inside of negation and union" ;
	mf:action [
		sht:schema <recursive-005.ttl> ; 
		sht:data   <recursive-005.ttl> ; 
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:a ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-006>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion inside of union" ;
	mf:action [
		sht:schema <recursive-006.ttl> ; 
		sht:data   <recursive-006.ttl> ; 
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:a ;
  		sh:subject ex:a ;
  		sh:predicate ex:p ;
  		sh:object ex:b ;
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:a ;
  		sh:subject ex:a ;
  		sh:predicate ex:p ;
  		sh:object ex:c ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-007>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursion inside of negation" ;
	mf:action [
		sht:schema <recursive-007.ttl> ; 
		sht:data   <recursive-007.ttl> ; 
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:a ;
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:b ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-008>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursive chain inside of negation" ;
	mf:action [
		sht:schema <recursive-008.ttl> ; 
		sht:data   <recursive-008.ttl> ; 
	] ;
	mf:result [
		a sh:FatalError ;
  		sh:root ex:a ;
	] ;
	mf:status sht:proposed ; 
.

<recursive-009>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape with recursive chain" ;
	mf:action [
		sht:schema <recursive-009.ttl> ; 
		sht:data   <recursive-009.ttl> ; 
	] ;
	mf:status sht:proposed ; 
.

<valueClass-001>
	a sht:Validate ;
	mf:name "Test of a sh:valueClass" ;
	mf:action [
		sht:schema <valueClass-001.ttl> ; 
		sht:data   <valueClass-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
  		sh:subject ex:InvalidInstance1 ;
  		sh:predicate ex:value ;
  		sh:object ex:InvalidInstance1 ;
	] ;
	mf:status sht:proposed ; 
.

<valueShape-001>
	a sht:Validate ;
	mf:name "Test of a sh:valueShape" ;
	mf:action [
		sht:schema <valueShape-001.ttl> ; 
		sht:data   <valueShape-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:Issue_1 ;
  		sh:subject ex:Issue_1 ;
  		sh:predicate ex:assignedTo ;
  		sh:object ex:Anon ;
	] ;
	mf:status sht:proposed ; 
.

<xor-001>
	a sht:Validate ;
	mf:name "Test of a sh:XorConstraint" ;
	mf:action [
		sht:schema <xor-001.ttl> ; 
		sht:data   <xor-001.ttl> ; 
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance1 ;
	] ;
	mf:result [
		a sh:Error ;
  		sh:root ex:InvalidInstance2 ;
	] ;
	mf:status sht:proposed ; 
.
